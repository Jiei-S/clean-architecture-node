/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectCreateParams } from '../models';
// @ts-ignore
import { ProjectResponse } from '../models';
/**
 * ProjectInternalApi - axios parameter creator
 * @export
 */
export const ProjectInternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ProjectCreateParams} projectCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (projectCreateParams: ProjectCreateParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreateParams' is not null or undefined
            assertParamExists('createProject', 'projectCreateParams', projectCreateParams)
            const localVarPath = `/internal/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProject: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findProject', 'id', id)
            const localVarPath = `/internal/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/internal/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectInternalApi - functional programming interface
 * @export
 */
export const ProjectInternalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectInternalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ProjectCreateParams} projectCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(projectCreateParams: ProjectCreateParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(projectCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findProject(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectInternalApi - factory interface
 * @export
 */
export const ProjectInternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectInternalApiFp(configuration)
    return {
        /**
         * 
         * @param {ProjectCreateParams} projectCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(projectCreateParams: ProjectCreateParams, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.createProject(projectCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProject(id: string, options?: any): AxiosPromise<ProjectResponse> {
            return localVarFp.findProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(options?: any): AxiosPromise<Array<ProjectResponse>> {
            return localVarFp.getProjects(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProject operation in ProjectInternalApi.
 * @export
 * @interface ProjectInternalApiCreateProjectRequest
 */
export interface ProjectInternalApiCreateProjectRequest {
    /**
     * 
     * @type {ProjectCreateParams}
     * @memberof ProjectInternalApiCreateProject
     */
    readonly projectCreateParams: ProjectCreateParams
}

/**
 * Request parameters for findProject operation in ProjectInternalApi.
 * @export
 * @interface ProjectInternalApiFindProjectRequest
 */
export interface ProjectInternalApiFindProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectInternalApiFindProject
     */
    readonly id: string
}

/**
 * ProjectInternalApi - object-oriented interface
 * @export
 * @class ProjectInternalApi
 * @extends {BaseAPI}
 */
export class ProjectInternalApi extends BaseAPI {
    /**
     * 
     * @param {ProjectInternalApiCreateProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInternalApi
     */
    public createProject(requestParameters: ProjectInternalApiCreateProjectRequest, options?: any) {
        return ProjectInternalApiFp(this.configuration).createProject(requestParameters.projectCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectInternalApiFindProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInternalApi
     */
    public findProject(requestParameters: ProjectInternalApiFindProjectRequest, options?: any) {
        return ProjectInternalApiFp(this.configuration).findProject(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInternalApi
     */
    public getProjects(options?: any) {
        return ProjectInternalApiFp(this.configuration).getProjects(options).then((request) => request(this.axios, this.basePath));
    }
}
